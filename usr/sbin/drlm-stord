#!/bin/bash
#
# drlm-stord    This shell script takes care of starting and stopping
#               the DRLM Store Service.
#
# Description:       DRLM is a central Disaster Recovery Manager
#                    for Linux OS. This service provides DR Images
#                    Store Service available for Recover configured
#                    servers in your network.

# What is this?
DESC="DRLM Store Service"
SHARE_DIR="/usr/share/drlm"
PROGRAM="DRLM-STORD"
WORKFLOW=""
CONFIG_DIR="/etc/drlm"
LOGFILE="/var/log/drlm/drlm-stord.log"

# Source DRLM configurations and functions
source $SHARE_DIR/conf/default.conf
[ -f /etc/drlm/site.conf  ] && source /etc/drlm/site.conf
[ -f /etc/drlm/local.conf ] && source /etc/drlm/local.conf

source $SHARE_DIR/lib/dbdrv/$DB_BACKEND-driver.sh
source $SHARE_DIR/lib/backup-functions.sh
source $SHARE_DIR/lib/client-functions.sh
source $SHARE_DIR/lib/nfs-functions.sh
source $SHARE_DIR/lib/rsync-functions.sh

# Returned value
RETVAL="0"

# Only root can start the service
uid=`id | cut -d\( -f1 | cut -d= -f2`
[ $uid -ne 0 ] && exit 4

# Exit if required binaries are missing.
[ -x /usr/sbin/drlm ] || exit 0
[ -x /bin/mount     ] || exit 0
[ -x /bin/umount    ] || exit 0

# Exit if required files are missing.
[ -f /var/lib/drlm/drlm.sqlite ] || exit 0

# Log and Error functions
function Stamp() {
  date +"%Y-%m-%d %H:%M:%S "
}

function Error () {
  echo "$(Stamp) Error: $*" | tee -a $LOGFILE
  return 1
}

function Log () {
  echo "$(Stamp)$*" | tee -a $LOGFILE
}

echo "$(Stamp)Command: drlm-stord $@" >> $LOGFILE

if [ -n "$2" ]; then
  if exist_client_name "$2"; then
    CLI_NAME_INPUT="$2"
  else
    Log "Client name $2 not found"
    exit 1
  fi
fi

case "$1" in
	start)
    WORKFLOW="START"

		if [ ! -d $VAR_DIR/run ]; then
			mkdir $VAR_DIR/run
		fi
    
    Log "Starting $DESC: "
    for BACKUPLINE in $(get_active_backups); do
      BKP_ID=$(echo ${BACKUPLINE} | awk -F":" '{ print $1 }')
      SNAP_ID=$(get_backup_active_snap_by_backup_id $BKP_ID)
      DR_FILE=$(echo ${BACKUPLINE} | awk -F":" '{ print $3 }')
      ACTIVE_BKP=$(echo ${BACKUPLINE} | awk -F":" '{ print $5 }')
      CLI_NAME=$(echo ${DR_FILE}| cut -d"." -f1)
      CLI_CFG=$(echo ${BACKUPLINE} | awk -F":" '{ print $8 }')

      if [ -z "$CLI_NAME_INPUT" ] || [ "$CLI_NAME" == "$CLI_NAME_INPUT" ]; then
        if ! pgrep -fa $DR_FILE &> /dev/null; then
          if [ "$ACTIVE_BKP" == "1" ]; then
            enable_backup_store_ro $DR_FILE $CLI_NAME $CLI_CFG $SNAP_ID
          elif [ "$ACTIVE_BKP" == "2" ]; then
            enable_backup_store_rw $DR_FILE $CLI_NAME $CLI_CFG $SNAP_ID
          elif [ "$ACTIVE_BKP" == "3" ]; then
            enable_backup_store_rw_full $DR_FILE $CLI_NAME $CLI_CFG $SNAP_ID
          fi
        else
          Log "Backup $BKP_ID of client $CLI_NAME already enabled"
        fi

        return_value="$?"
        if [ "$return_value" -ne "0" ]; then RETVAL="1"; fi
      fi
    done
    ;;

	stop)
    WORKFLOW="STOP"
    
    Log "Shutting down $DESC: "
    
    Log "Removing rsync modules"
    unconfigure_rsync_modules $CLI_NAME_INPUT
    if [ "$?" -eq "0" ]; then 
      Log "RSYNC:MODULES:REMOVE: .... Success!"
    else
      Error "RSYNC:MODULES:REMOVE: Problem removing rsyncd.d modules ..."
      RETVAL="1"
    fi 

		Log "Unconfiguring NFS exports"
    unconfigure_nfs_exports $CLI_NAME_INPUT
  	reload_nfs
    if [ "$?" -eq "0" ]; then 
      Log "NFS:RELOAD:EXPORTFS: .... Success!"
    else
      Error "NFS:RELOAD:EXPORTFS: Problem reloading exportfs! ..."
      RETVAL="1"
    fi 

    Log "Umounting DR Images: "
    for NBD_MOUNT_POINT in $(/bin/mount -l | grep "$STORDIR/$CLI_NAME_INPUT" | awk '{print $3}');	do
      do_umount $NBD_MOUNT_POINT
      if [ "$?" -eq "0" ]; then 
        Log "FS:UMOUNT:MOUNT_POINT($NBD_MOUNT_POINT): .... Success!"
      else
        Error "FS:UMOUNT:MOUNT_POINT($NBD_MOUNT_POINT): Problem unmounting Filesystem!"
        RETVAL="1"
      fi 
    done

    Log "Disabling NBD devices: "
    
    # ATTENTION! pgrep has to be used carefully, can return unwanted results if the match pattern is too simple.
    # for example: if I want to find the process that attach one device only filttering by Backup id
    # pgrep may return this process and the drlm bkpmgr process with the Backup id we are trying to disable
    for NBD_DEVICE in $(pgrep -fa "${ARCHDIR}/$CLI_NAME_INPUT" | awk '{print $4}'); do
      disable_nbd $NBD_DEVICE
      if [ "$?" -eq "0" ]; then 
        Log "NBD_DEVICE:DETACH:NBD_DEVICE($NBD_DEVICE): .... Success!"
      else
        Error "NBD_DEVICE:DETACH:NBD_DEVICE($NBD_DEVICE): Problem disabling NBD Device!"
        RETVAL="1"
      fi 
    done
		;;

	status)
    WORKFLOW="STATUS"

    # MOUNT_UP=$(/bin/mount -l | grep "$STORDIR" | wc -l)
    # # ATTENTION! pgrep has to be used carefully, can return unwanted results if the match pattern is too simple.
    # # for example: if I want to find the process that attach one device only filttering by Backup id
    # # pgrep may return this process and the drlm bkpmgr process with the Backup id we are trying to disable
    # NBD_UP=$(pgrep -fa $ARCHDIR |  wc -l)
    
    Log "Getting Status from $DESC: "
    #Log "$(printf '%-12s\n' "$(tput bold)")"
		Log "$(printf '%-20s %-10s %-45s %-50s\n' ""$(tput bold)"NBD Device" "NET Mode" "DR Store" "DR File$(tput sgr0)")"
    for MOUNT_POINT in $(/bin/mount -l | grep "$STORDIR/$CLI_NAME_INPUT" | awk '{print $3}'); do
      NBD_DEVICE=$(/bin/mount -l | grep -w "$MOUNT_POINT" | awk '{print $1}')

      # Remove p1 (the partition sufix) from the end of mounted partitions in order to get the device
      NBD_DEVICE=${NBD_DEVICE%p1}

      # ATTENTION! pgrep has to be used carefully, can return unwanted results if the match pattern is too simple.
      # for example: if I want to find the process that attach one device only filttering by Backup id
      # pgrep may return this process and the drlm bkpmgr process with the Backup id we are trying to disable
      # PGREP_RESULT intermediate step to avoid unwanted results of grep and pgrep combo
      PGREP_RESULT="$(pgrep -fa $NBD_DEVICE)"
      DR_FILE=$(echo "$PGREP_RESULT" | grep -w "$NBD_DEVICE" | awk '{print $6}' | awk -F"=" '{print $3}' | awk -F"," '{print $1}')
      
      # get NBD status
      if /bin/mount -l | grep -w "$MOUNT_POINT" | awk '{print $6}' | grep -q rw; then
        NBD_DEVICE="(rw)$NBD_DEVICE"
      else
        NBD_DEVICE="(ro)$NBD_DEVICE"
      fi

      # get NFS status
      NFS_MODE=""

      if grep -rq "$MOUNT_POINT" /etc/exports.d/; then
        if [[ $(basename $(grep -r "$MOUNT_POINT" /etc/exports.d/ | cut -d":" -f1)) != .* ]]; then 
          if grep -r "$MOUNT_POINT" /etc/exports.d/ | grep -q "(rw,"; then
            NFS_MODE="(rw)NFS"
          else
            NFS_MODE="(ro)NFS"
          fi
        fi
      fi

      #get RSYNC status
      RSYNC_MODE=""

      if grep -rq "$MOUNT_POINT" /etc/drlm/rsyncd/rsyncd.d/; then
        RSYNC_STATUS=$(grep "read only" $(grep -r "$MOUNT_POINT" /etc/drlm/rsyncd/rsyncd.d/ | cut -d":" -f1) | awk '{print $4}')
        if [ "$RSYNC_STATUS" == "false" ]; then
          RSYNC_MODE="(rw)RSYNC"
        else 
          RSYNC_MODE="(ro)RSYNC"
        fi
      fi
      
      NET_MODE="$NFS_MODE$RSYNC_MODE"

      Log "$(printf '%-16s %-10s %-45s %-50s\n' "$NBD_DEVICE" "$NET_MODE" "$MOUNT_POINT" "$DR_FILE")"
      
    done
		;;

	restart | reload | force-reload)
    WORKFLOW="RESTART"
		$0 stop
		sleep 1
		$0 start
		;;

	*)
    Log "Usage: drlm-stord {start|stop|status|restart|reload|force-reload}"
		RETVAL=2
		;;

esac
exit $RETVAL
