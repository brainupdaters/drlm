#!/bin/bash
#
# drlm-stord    This shell script takes care of starting and stopping
#               the DRLM Store Service.
#
# DEBIAN
# update-rc.d drlm-stord defaults 10 06
#
# RHEL
# chkconfig: - 29 61
#
# Description:       DRLM is a central Disaster Recovery Manager
#                    for Linux OS. This service provides DR Images
#                    Store Service available for Recover configured
#                    servers in your network.

### BEGIN INIT INFO
# Provides:          drlm-stord
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DRLM Store Service
# Description:       DRLM is a central Disaster Recovery Manager
#                    for Linux OS. This service provides DR Images
#                    Store Service available for Recover configured
#                    servers in your network.
### END INIT INFO

# What is this?
DESC="DRLM Store Service"
SHARE_DIR="/usr/share/drlm"
PROGRAM="DRLM-STORD"
WORKFLOW=""

# Source DRLM configurations and functions
source $SHARE_DIR/conf/default.conf
[ -f /etc/drlm/site.conf  ] && source /etc/drlm/site.conf
[ -f /etc/drlm/local.conf ] && source /etc/drlm/local.conf

source $SHARE_DIR/lib/dbdrv/$DB_BACKEND-driver.sh
source $SHARE_DIR/lib/backup-functions.sh
source $SHARE_DIR/lib/nfs-functions.sh

# Returned value
RETVAL="0"

# Only root can start the service
uid=`id | cut -d\( -f1 | cut -d= -f2`
[ $uid -ne 0 ] && exit 4

# Exit if required binaries are missing.
[ -x /usr/sbin/drlm ] || exit 0
[ -x /bin/mount     ] || exit 0
[ -x /bin/umount    ] || exit 0

# Exit if required files are missing.
[ -f /var/lib/drlm/drlm.sqlite ] || exit 0

# Log and Error functions
function Stamp() {
  date +"%Y-%m-%d %H:%M:%S "
}

function Error () {
  echo "$(Stamp) Error: $*"
  return 1
}

function Log () {
  echo "$(Stamp)$*"
}

case "$1" in
	start)
    WORKFLOW="START"

		if [ ! -d $VAR_DIR/run ]; then
			mkdir $VAR_DIR/run
		fi
    
    Log "Starting $DESC: "
    for BACKUPLINE in $(get_active_backups); do
      BKP_ID=$(echo ${BACKUPLINE} | awk -F":" '{ print $1 }')
      SNAP_ID=$(get_backup_active_snap_by_backup_id $BKP_ID)
      DR_FILE=$(echo ${BACKUPLINE} | awk -F":" '{ print $3 }')
      CLI_NAME=$(echo ${DR_FILE}| cut -d"." -f1)
      CLI_CFG=$(echo ${BACKUPLINE} | awk -F":" '{ print $8 }')
      enable_backup_store_ro $DR_FILE $CLI_NAME $CLI_CFG $SNAP_ID
      return_value="$?"
      if [ "$return_value" -ne "0" ]; then RETVAL="1"; fi
    done
    ;;

	stop)
    WORKFLOW="STOP"
    
    Log "Shutting down $DESC: "
    
		Log "Unconfiguring NFS exports"
    unconfigure_nfs_exports
  	reload_nfs
    if [ "$?" -eq "0" ]; then 
      Log "NFS:RELOAD:EXPORTFS: .... Success!"
    else
      Error "NFS:RELOAD:EXPORTFS: Problem eloading exportfs! ..."
      RETVAL="1"
    fi 

    Log "Umounting DR Images: "
    for NBD_MOUNT_POINT in $(/bin/mount -l | grep "$STORDIR" | awk '{print $3}');	do
      do_umount $NBD_MOUNT_POINT
      if [ "$?" -eq "0" ]; then 
        Log "FS:UMOUNT:MOUNT_POINT($NBD_MOUNT_POINT): .... Success!"
      else
        Error "FS:UMOUNT:MOUNT_POINT($NBD_MOUNT_POINT): Problem unmounting Filesystem!"
        RETVAL="1"
      fi 
    done

    Log "Disabling NBD devices: "
    
    # ATTENTION! pgrep has to be used carefully, can return unwanted results if the match pattern is too simple.
    # for example: if I want to find the process that attach one device only filttering by Backup id
    # pgrep may return this process and the drlm bkpmgr process with the Backup id we are trying to disable
    for NBD_DEVICE in $(pgrep -fa ${ARCHDIR} | awk '{print $4}'); do
      disable_nbd $NBD_DEVICE
      if [ "$?" -eq "0" ]; then 
        Log "NBD_DEVICE:DETACH:NBD_DEVICE($NBD_DEVICE): .... Success!"
      else
        Error "NBD_DEVICE:DETACH:NBD_DEVICE($NBD_DEVICE): Problem disabling NBD Device!"
        RETVAL="1"
      fi 
    done
		;;

	status)
    WORKFLOW="STATUS"

    MOUNT_UP=$(/bin/mount -l | grep "$STORDIR" | wc -l)
    # ATTENTION! pgrep has to be used carefully, can return unwanted results if the match pattern is too simple.
    # for example: if I want to find the process that attach one device only filttering by Backup id
    # pgrep may return this process and the drlm bkpmgr process with the Backup id we are trying to disable
    NBD_UP=$(pgrep -fa $ARCHDIR |  wc -l)
    
    Log "Getting Status from $DESC: "
    printf '%-12s\n' "$(tput bold)"
		printf '%-12s %-45s %-50s\n' "NBD Device" "DR Store" "DR File$(tput sgr0)"
    for MOUNT_POINT in $(/bin/mount -l | grep "$STORDIR" | awk '{print $3}'); do
      NBD_DEVICE=$(/bin/mount -l | grep -w "$MOUNT_POINT" | awk '{print $1}')
      # ATTENTION! pgrep has to be used carefully, can return unwanted results if the match pattern is too simple.
      # for example: if I want to find the process that attach one device only filttering by Backup id
      # pgrep may return this process and the drlm bkpmgr process with the Backup id we are trying to disable
      # PGREP_RESULT intermediate step to avoid unwanted results of grep and pgrep combo
      PGREP_RESULT="$(pgrep -fa $NBD_DEVICE)"
      DR_FILE=$(echo "$PGREP_RESULT" | grep -w "$NBD_DEVICE" | awk '{print $5}')
      printf '%-12s %-45s %-50s\n' $NBD_DEVICE $MOUNT_POINT $DR_FILE
    done
		;;

	restart | reload | force-reload)
    WORKFLOW="RESTART"
		$0 stop
		sleep 1
		$0 start
		;;

	*)
    Log "Usage: drlm-stord {start|stop|status|restart|reload|force-reload}"
		RETVAL=2
		;;

esac
exit $RETVAL
