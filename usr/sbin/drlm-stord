#!/bin/bash
#
# drlm-stord    This shell script takes care of starting and stopping
#               the DRLM Store Service.
#
# DEBIAN
# update-rc.d drlm-stord defaults 10 06
#
# RHEL
# chkconfig: - 29 61
#
# Description:       DRLM is a central Disaster Recovery Manager
#                    for Linux OS. This service provides DR Images
#                    Store Service available for Recover configured
#                    servers in your network.

### BEGIN INIT INFO
# Provides:          drlm-stord
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DRLM Store Service
# Description:       DRLM is a central Disaster Recovery Manager
#                    for Linux OS. This service provides DR Images
#                    Store Service available for Recover configured
#                    servers in your network.
### END INIT INFO

# What is this?
DESC="DRLM Store Service"
SHARE_DIR="/usr/share/drlm"
PROGRAM="DRLM-STORED"
WORKFLOW=""

# Source DRLM configurations and functions
source $SHARE_DIR/conf/default.conf
[ -f /etc/drlm/site.conf  ] && source /etc/drlm/site.conf
[ -f /etc/drlm/local.conf ] && source /etc/drlm/local.conf
source $SHARE_DIR/lib/dbdrv/$DB_BACKEND-driver.sh
source $SHARE_DIR/lib/backup-functions.sh
source $SHARE_DIR/lib/nfs-functions.sh

# Returned value
RETVAL="0"

# Only root can start the service
uid=`id | cut -d\( -f1 | cut -d= -f2`
[ $uid -ne 0 ] && exit 4

# Exit if required binaries are missing.
[ -x /usr/sbin/drlm ] || exit 0
[ -x /sbin/losetup  ] || exit 0
[ -x /bin/mount     ] || exit 0
[ -x /bin/umount    ] || exit 0

# Exit if required files are missing.
[ -f /var/lib/drlm/drlm.sqlite ] || exit 0

# Log and Error functions
function Stamp() {
  date +"%Y-%m-%d %H:%M:%S "
}

function Error () {
  echo "$(Stamp) Error: $*"
  return 1
}

function Log () {
  echo "$(Stamp)$*"
}

case "$1" in
	start)
    WORKFLOW="START"

		if [ ! -d $VAR_DIR/run ]; then
			mkdir $VAR_DIR/run
		fi
    
    Log "Starting $DESC: "
    for BACKUPLINE in $(get_active_backups); do
      DR_FILE=$(echo ${BACKUPLINE} | awk -F":" '{ print $3 }')
      CLI_NAME=$(echo ${DR_FILE}| cut -d"." -f1)
      CLI_CFG=$(echo ${BACKUPLINE} | awk -F":" '{ print $8 }')
      enable_backup_store_ro $DR_FILE $CLI_NAME $CLI_CFG
      return_value="$?"
      if [ "$return_value" -ne "0" ]; then RETVAL="1"; fi
    done
    ;;

	stop)
    WORKFLOW="STOP"
    
    Log "Shutting down $DESC: "
    
		Log "Unconfiguring NFS exports"
    unconfigure_nfs_exports
  	reload_nfs
    if [ "$?" -eq "0" ]; then 
      Log "$PROGRAM:$WORKFLOW:NFS:RELOAD:EXPORTFS: .... Success!"
    else
      Error "$PROGRAM:$WORKFLOW:NFS:RELOAD:EXPORTFS: Problem eloading exportfs! ..."
      RETVAL="1"
    fi 

    Log "Umounting DR Images: "
    for LOOP_MOUNT_POINT in $(/bin/mount -l | egrep "$STORDIR" | awk '{print $3}');	do
      do_umount $LOOP_MOUNT_POINT
      if [ "$?" -eq "0" ]; then 
        Log "$PROGRAM:$WORKFLOW:FS:UMOUNT:MOUNT_POINT($LOOP_MOUNT_POINT): .... Success!"
      else
        Error "$PROGRAM:$WORKFLOW:FS:UMOUNT:MOUNT_POINT($LOOP_MOUNT_POINT): Problem unmounting Filesystem! Aborting ..."
        RETVAL="1"
      fi 
    done

    Log "Disabling Loop devices: "
    for LOOP_DEVICE in $(/sbin/losetup --list | egrep "$ARCHDIR" | awk '{print $1}'); do
      disable_loop $LOOP_DEVICE
      if [ "$?" -eq "0" ]; then 
        Log "$PROGRAM:$WORKFLOW:LOOP_DEVICE:DETACH:LOOPDEV($LOOP_DEVICE): .... Success!"
      else
        Error "$PROGRAM:$WORKFLOW:LOOP_DEVICE:DETACH:LOOPDEV($LOOP_DEVICE): Problem disabling Loop Device!"
        RETVAL="1"
      fi 
    done
		;;

	status)
    WORKFLOW="STATUS"

    MOUNT_UP=$(/bin/mount -l | egrep "$STORDIR" | wc -l)
    LOOP_UP=$(/sbin/losetup --list | egrep "$ARCHDIR" |  wc -l)

    Log "Getting Status from $DESC: "
    printf '%-12s\n' "$(tput bold)"
		printf '%-12s %-8s %-45s %-50s\n' "Loop Dev." "FS Type" "DR Store" "DR File$(tput sgr0)"
    for MOUNT_POINT in $(/bin/mount -l | egrep "$STORDIR" | awk '{print $3}'); do
      LOOP_DEVICE=$(/bin/mount -l | egrep "$MOUNT_POINT" | awk '{print $1}')
      if [ -z "${LOOP_DEVICE##*loop*}" ]; then
        DR_FILE=$(/sbin/losetup $LOOP_DEVICE | awk '{print $3}')
      else
        DR_FILE=$(echo -e $LOOP_DEVICE | awk '{print $1}')
        LOOP_DEVICE=$(/sbin/losetup -a | grep $DR_FILE | awk -F':' '{print $1}')
      fi
      FSTYPE=$(/bin/mount -l | egrep "$MOUNT_POINT" | awk '{print $5}')
      printf '%-12s %-8s %-45s %-50s\n' $LOOP_DEVICE $FSTYPE $MOUNT_POINT $DR_FILE
    done
		;;

	restart | reload | force-reload)
    WORKFLOW="RESTART"
		$0 stop
		sleep 1
		$0 start
		;;

	*)
    Log "Usage: drlm-stord {start|stop|status|restart|reload|force-reload}"
		RETVAL=2
		;;

esac
exit $RETVAL
